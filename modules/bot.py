import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from flask import Flask
from flask_mongoengine import MongoEngine
from mongoengine import disconnect
from asgiref.sync import sync_to_async

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# Flask + MongoDB setup
db = MongoEngine()
app = Flask(__name__)
app.config['MONGODB_SETTINGS'] = {
    'db': 'places_db',
    'host': 'mongodb://db:27017/places_db'
}
app.config['SECRET_KEY'] = 'super_secret_key_12345'
disconnect(alias='default')
db.init_app(app)

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π (UserModel —ñ PlaceModel –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —É —Ñ–∞–π–ª—ñ models.py)
from models import UserModel, PlaceModel

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –æ–±–≥–æ—Ä—Ç–∫–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é
@sync_to_async
def get_registered_user(username):
    return UserModel.objects(telegram=username).first()

@sync_to_async
def update_chat_id(user, chat_id):
    user.telegram_chat_id = str(chat_id)
    user.save()

@sync_to_async
def search_places(user, keyword):
    # –ü–æ—à—É–∫ –ø–æ —ñ–º–µ–Ω—ñ (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
    return list(PlaceModel.objects(user=user, name__icontains=keyword))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username
    chat_id = update.effective_chat.id

    if not username:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ Telegram username!")
        return

    user_obj = await get_registered_user(username)
    if not user_obj:
        await update.message.reply_text("‚ùå –¢–µ–±–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π —Å–≤—ñ–π Telegram username –Ω–∞ —Å–∞–π—Ç—ñ.")
        return

    # –ó–±–µ—Ä–µ–∂–µ–º–æ —é–∑–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    context.user_data['user_obj'] = user_obj
    await update_chat_id(user_obj, chat_id)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ—ó –º—ñ—Å—Ü—è")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await update.message.reply_text(
        f"‚úÖ –ü—Ä–∏–≤—ñ—Ç, @{user_obj.telegram}! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –º—ñ—Å—Ü—è.",
        reply_markup=keyboard
    )

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_obj = context.user_data.get('user_obj')

    if not user_obj:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É "–û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ—ó –º—ñ—Å—Ü—è"
    if text == "–û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ—ó –º—ñ—Å—Ü—è":
        # –ü–æ–º—ñ—á–∞—î–º–æ, —â–æ —Ç–µ–ø–µ—Ä —á–µ–∫–∞—î–º–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
        context.user_data['expecting_keyword'] = True
        await update.message.reply_text("üîç –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É –≤–∞—à–∏—Ö –º—ñ—Å—Ü—å:")
        return

    # –Ø–∫—â–æ –±–æ—Ç —á–µ–∫–∞—î –Ω–∞ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
    if context.user_data.get('expecting_keyword', False):
        context.user_data['expecting_keyword'] = False
        keyword = text
        await search_and_send_places(update, context, user_obj, keyword)
        return

    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É
    await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥–∏ /start –∑–∞–Ω–æ–≤–æ.")

# –ü–æ—à—É–∫ –º—ñ—Å—Ü—å —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
async def search_and_send_places(update: Update, context: ContextTypes.DEFAULT_TYPE, user_obj, keyword: str):
    chat_id = update.effective_chat.id
    await update_chat_id(user_obj, chat_id)

    places = await search_places(user_obj, keyword)

    if not places:
        await update.message.reply_text("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ü–∏–º —Å–ª–æ–≤–æ–º.")
        return

    for place in places:
        if not place.image:
            continue

        caption = (
            f"<b>{place.name}</b>\n"
            f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place.rating}\n"
            f"üìç –ê–¥—Ä–µ—Å–∞: {place.full_address}\n"
            f"üè∑ –¢–∏–ø: {place.place_type}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {place.phone}\n"
            f"üåê –í–µ–±—Å–∞–π—Ç: {place.website}"
        )

        await update.message.reply_photo(
            photo=place.image,
            caption=caption,
            parse_mode="HTML"
        )

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É
if __name__ == "__main__":
    TELEGRAM_BOT_TOKEN = "7600737352:AAHpzQQXfoaUOC6ZxJyUIYd3RwpMhX6xWXM"

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.run_polling()

